#!/usr/bin/env node
'use strict'

const promise = require('bluebird');
const fs = promise.promisifyAll(require('fs'));
const path = require('path');
const recursive = require('recursive-readdir');
const cli = require('cli');
const marked = promise.promisifyAll(require('marked'));

const renderer = new marked.Renderer();
const baseRendererLinkFunc = renderer.link.bind(renderer);
renderer.link = (href, title, text) => {
    let url = href;
    if (path.extname(href) == '.md') {
        url = `#${path.basename(href, '.md').toLowerCase().replace(/[^\w]+/g, '-')}`;
    }
    return baseRendererLinkFunc(url, title, text);
};

cli.enable('version');
cli.setApp(path.join(__dirname, '../package.json'));
cli.parse({
    output: [ 'o', 'A file to save the generated HTML to.', 'file', 'output.html' ],
    style: [ 's', '(Optional) A CSS style file to load into the generated HTML.', 'file' ],
    title: ['t', 'The title to use in the header of the HTML.', 'string', 'Documentation' ]
});

cli.main( (args, options) => {
    if (args.length) {
        const inputPath = args[0];
        const output = options.output;
        const styleFile = options.style;
        const defaultStyle = path.join(__dirname, '../lib/default.style.css');
        const defaultJS = path.join(__dirname, '../lib/toc.js');
        const htmlTitle = options.title;

        cli.info(`${cli.app} will look for Markdown files in ${path.resolve(inputPath)}`);
        recursive(inputPath, [ignoreNonMarkdownFiles], (err,files) => {
            if (err) {
                cli.error(`${err}`);
                process.exit(2);
            }

            files.sort();

            cli.info(`${cli.app} found ${files.length} Markdown files.`);
            cli.info(`${cli.app} will parse the Markdown and generate Markup.`);

            let readFilePromises = []
            files.forEach( (file) => {
                readFilePromises.push(
                    fs.readFileAsync(file, "utf8")
                    .then(markdown => marked(markdown, { renderer }))
                    .then((markup) => {
                        let id = path.basename(file,'.md').toLowerCase().replace(/[^\w]+/g, '-');
                        return `<section id="${id}">${markup}</section>`
                    })
                );
            });

            new promise.all(readFilePromises)
            .then((filesMarkupContents) =>
                filesMarkupContents.reduce((totalContent, contents) => {
                    return totalContent += contents;
                }, '')
            )
            .then( (markup) => {
                return promise.join(
                   promise.resolve(markup),
                   fs.readFileAsync(defaultStyle, 'utf8'),
                   new Promise( (resolve, reject) => {
                       if (styleFile) {
                           return resolve(fs.readFileAsync(styleFile, 'utf8'));
                       } else {
                           return resolve('');
                       }
                   }),
                   fs.readFileAsync(defaultJS, 'utf8'),
                   (markup, defaultCss, css, js) => {
                    return `
                        <!doctype html>
                        <html>
                            <head>
                                <meta charset="utf-8"/>
                                <title>${htmlTitle}</title>
                                <style>${defaultCss}</style>
                                <style>${css}</style>
                                <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
                            </head>
                            <body onload='init()'>
                            <nav id="toc">
                                <ul id="tocmenu"></ul>
                            </nav>
                            <div id="content">
                            <h1>${htmlTitle}</h1>
                            ${markup}
                            </div>
                            <button id="return-to-top"><p>^</p></button>
                            <script>${js}</script>
                            </body>
                        </html>`;
                   });
            })
            .then(markup => fs.writeFileAsync(output, markup))
            .then(() => cli.ok(`The Markup document has been generated here: ${output}`))
            .catch((e) => {
                cli.error(`${e}`)
                process.exit(3);
            });
        });
    } else {
        cli.error(`${cli.app} was called without an argument.`)
        console.error(`       run '${cli.app} --help' for usage instructions.`)
        process.exit(1)
    }
});

function ignoreNonMarkdownFiles(file, stats) {
  return !stats.isDirectory() && path.extname(file) != ".md";
}