#!/usr/bin/env node
'use strict'

const promise = require('bluebird');
const fs = promise.promisifyAll(require('fs'));
const path = require('path');
const recursive = require('recursive-readdir');
const cli = require('cli');
const marked = promise.promisifyAll(require('marked'));

cli.enable('version');
cli.setApp('../package.json');
cli.parse({
    output: [ 'o', 'A file to save the generated HTML to.', 'file', 'output.html' ]
});

cli.main( (args, options) => {
    if (args.length) {
        const inputPath = args[0]
        const output = options.output

        cli.ok(`${cli.app} will look for Markdown files in ${path.resolve(inputPath)}...`);
        recursive(inputPath, [ignoreNonMarkdownFiles], (err,files) => {
            if (err) {
                cli.error(`${err}`);
                process.exit(2);
            }

            cli.ok(`${cli.app} found ${files.length} Markdown files.`);
            cli.ok(`${cli.app} will parse the Markdown and generate Markup...`);

            let readFilePromises = []
            files.forEach( (file) => {
                readFilePromises.push(
                    fs.readFileAsync(file, "utf8")
                    .then(markdown => marked(markdown))
                );
            });

            new promise.all(readFilePromises)
            .then((filesMarkupContents) => {
                let totalContent = ''
                filesMarkupContents.forEach( (contents) => {
                    totalContent += `<section>${contents}</section>`;
                });
                return totalContent;
            })
            .then((markup) => {
                return `
                        <!doctype html>
                        <html>
                            <head>
                                <meta charset="utf-8"/>
                                <title>Documentation</title>
                            </head>
                            <body>
                            <div id="content">
                            ${markup}
                            </div>
                            </body>
                        </html>`;
            })
            .tap(markup => console.log(markup))
            .then(markup => fs.writeFileAsync(output, markup))
            .then(() => cli.ok(`The Markup document has been generated here: ${output}`))
            .catch((e) => {
                cli.error(`${e}`)
                process.exit(3);
            });
        });
    } else {
        cli.error(`${cli.app} was called without an argument.`)
        console.error(`       run '${cli.app} --help' for usage instructions.`)
        process.exit(1)
    }
});

function ignoreNonMarkdownFiles(file, stats) {
  return !stats.isDirectory() && path.extname(file) != ".md";
}